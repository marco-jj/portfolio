---
import Badge from "@components/Badge.astro";
import { Icon } from "astro-icon/components";
import { getGitHubStars } from "../utils/github";

interface Props {
	name: string;
	role: "author" | "contributor" | "maintainer";
	url: string;
	description: string | null;
	languages: string[];
	stars: number;
	website: string | null;
}

const colors = {
	maintainer: "gradient-pink",
	author: "gradient-indigo",
	contributor: "green",
} as const;

const { name, role, url, description, languages, website } = Astro.props;

const getRepoPath = (githubUrl: string) => {
	try {
		const urlObj = new URL(githubUrl);
		if (urlObj.hostname === "github.com") {
			return urlObj.pathname.substring(1);
		}
	} catch (e) {
		console.error("Invalid URL:", githubUrl);
	}
	return "";
};

const repoPath = getRepoPath(url);
let stars = 0;
let loading = true;
let error = false;

try {
	if (repoPath) {
		stars = await getGitHubStars(repoPath);
	}
	loading = false;
} catch (e) {
	console.error("Error fetching stars:", e);
	loading = false;
	error = true;
}
---

<li
  class="repo-card group relative overflow-hidden dark:text-neutral-400 text-neutral-500 gap-1 p-6 border dark:border-neutral-700/60 border-neutral-200/80 rounded-xl flex flex-col bg-white/30 dark:bg-neutral-800/30 shadow-sm hover:shadow-md transition-all duration-300 backdrop-blur-sm"
>
  <div class="absolute inset-0 bg-grid-pattern opacity-5 dark:opacity-10"></div>

  <div
    class="absolute inset-0 bg-gradient-to-r from-transparent via-neutral-200/20 to-transparent dark:from-transparent dark:via-neutral-600/10 dark:to-transparent translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-1000"
  >
  </div>

  <div class="flex justify-between items-start z-10">
    <div class="flex flex-col sm:flex-row sm:items-baseline gap-2">
      <h2
        class="text-lg font-medium dark:text-white text-neutral-800 [word-break:break-word] group-hover:text-indigo-600 dark:group-hover:text-indigo-400 transition-colors duration-300"
      >
        {name}
      </h2>
      <Badge text={role} color={colors[role]} />
    </div>
    <div class="flex gap-2">
      <a
        href={url}
        target="_blank"
        rel="noopener noreferrer"
        aria-label={`Open ${name} repository in a new tab`}
        class="relative repo-icon-link"
      >
        <Icon
          name="mdi:github"
          class="w-6 fill-current dark:hover:text-neutral-50 hover:text-neutral-800 transition-all duration-300 transform hover:scale-110"
        />
      </a>
      {
        website && (
          <a
            href={website}
            target="_blank"
            rel="noopener noreferrer"
            aria-label={`Open ${name} website in a new tab`}
            class="relative repo-icon-link"
          >
            <Icon
              name="mdi:web"
              class="w-6 fill-current dark:hover:text-neutral-50 hover:text-neutral-800 transition-all duration-300 transform hover:scale-110"
            />
          </a>
        )
      }
    </div>
  </div>
  <div class="stars-container flex items-center gap-2 py-1">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="currentColor"
      class="w-5 text-amber-400"
    >
      <path
        fill-rule="evenodd"
        d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z"
        clip-rule="evenodd"></path>
    </svg>

    {
      loading && (
        <div class="inline-flex space-x-1">
          <div class="w-1.5 h-1.5 rounded-full bg-neutral-300 dark:bg-neutral-600 animate-bounce" />
          <div class="w-1.5 h-1.5 rounded-full bg-neutral-300 dark:bg-neutral-600 animate-bounce [animation-delay:0.2s]" />
          <div class="w-1.5 h-1.5 rounded-full bg-neutral-300 dark:bg-neutral-600 animate-bounce [animation-delay:0.4s]" />
        </div>
      )
    }

    {
      !loading && !error && (
        <span class="font-medium">{stars.toLocaleString()}</span>
      )
    }

    {error && <span class="text-red-500 text-sm">Unable to fetch</span>}
  </div>

  {
    description && (
      <p class="leading-relaxed mt-1 text-neutral-600 dark:text-neutral-300 line-clamp-3 group-hover:line-clamp-none transition-all duration-300">
        {description}
      </p>
    )
  }

  <ul class="flex flex-wrap gap-2 mt-3">
    {
      languages.map((item) => (
        <li class="text-xs font-medium dark:bg-neutral-700/80 bg-neutral-100 text-neutral-600 dark:text-neutral-200 rounded-full px-3 py-1 transition-all duration-300 hover:bg-neutral-200 dark:hover:bg-neutral-600 cursor-default">
          {item}
        </li>
      ))
    }
  </ul>
</li>
